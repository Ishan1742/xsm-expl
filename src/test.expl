type
node {
	int data;
	node next;
}
endtype

	class
	test{
		decl
		int n;
		int func();
		int f(int n);
		enddecl
		int func()
		{
			decl
			enddecl
			begin
				write("should work");
				return 0;
			end
		}
		int f(int n)
		{
			decl
			enddecl
			begin
			write("not work");
			return -1;
			end
		}
	}
	A
	{
	decl
	test hello;
	int x;
	int f(int n);
	enddecl
	int f(int n)
	{
			decl
			int p;
			int damn;
			enddecl
			begin
			self.hello = new(test);
			p = self.hello.func();
			breakpoint;
			if(n<=1)then
			p=1;
			else
			p=n*self.f(n-1);
			endif;
			write(p);
			breakpoint;
			return p;
			end
	}
	}
	B extends A
	{
	decl
	int y;
	int f(int n);
	enddecl
	int f(int n)
	{
		decl
		int q;
		int damn;
		enddecl
		begin
		if(n==1)then
		q=1;
		else
		if(n==0)then
		q=1;
		else
		q=self.f(n-1)+self.f(n-2);
		endif;
		endif;
		return q;
		end
	}
	}
	endclass

	decl
	A obj;
	test obj1;
	int check(int a, str b);
	enddecl

	int check(int a, str b)
	{
		decl
		enddecl
		begin
		write("check");
		return 1;
		end
	}

	int main()
	{
		decl
		int x,n;
		enddecl
		begin
		x=initialize();
		read(n);
		breakpoint;
		if(n>5) then
		obj = new(B);
		else
		obj=new(A);
		endif;
		x=obj.f(n);
		write(x);
		x = check(1, "hello");
		return 1;
		end



	}
